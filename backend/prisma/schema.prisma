generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(uuid())
  firstName   String
  lastName    String
  email       String        @unique
  password    String
  department  String?
  faculty     String?
  role        Role          @default(LECTURER)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  courses     Course[]
  LiveSession LiveSession[]
}

enum Role {
  LECTURER
  STUDENT
}

model Course {
  id          String        @id @default(uuid())
  title       String
  courseCode  String
  description String?
  lecturerId  String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  lecturer    User          @relation(fields: [lecturerId], references: [id])
  sessions    LiveSession[]
}

model LiveSession {
  id               String            @id @default(uuid())
  title            String
  lecturerId       String
  lecturer         User              @relation(fields: [lecturerId], references: [id])
  courseId         String
  course           Course            @relation(fields: [courseId], references: [id])
  invitationCode   String            @unique
  startTime        DateTime          @default(now())
  endTime          DateTime?
  isActive         Boolean           @default(true)
  students         StudentSession[]
  questions        Question[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  studentQuestions StudentQuestion[]
  pollResponses    PollResponse[]
}

model StudentSession {
  id               String            @id @default(uuid())
  sessionId        String
  session          LiveSession       @relation(fields: [sessionId], references: [id])
  name             String
  matricNo         String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  responses        Response[]
  studentQuestions StudentQuestion[]
  upvotes          Upvote[]
  pollResponses    PollResponse[]
}

model Question {
  id         String       @id @default(uuid())
  sessionId  String
  session    LiveSession  @relation(fields: [sessionId], references: [id])
  text       String
  type       QuestionType
  options    String[]
  isLaunched Boolean      @default(false)
  launchedAt DateTime?
  timeLimit  Int          @default(60)
  endedAt    DateTime?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  responses  Response[]
}

model StudentQuestion {
  id               String          @id @default(uuid())
  sessionId        String
  session          LiveSession     @relation(fields: [sessionId], references: [id])
  studentSessionId String? // Added to track who asked
  studentSession   StudentSession? @relation(fields: [studentSessionId], references: [id])
  text             String
  upvotes          Int             @default(0)
  isAnswered       Boolean         @default(false)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  upvotesRelation  Upvote[]
}

enum QuestionType {
  MCQ
  OPEN_ENDED
  TRUE_FALSE
  FORMULA
}

model Response {
  id          String         @id @default(uuid())
  questionId  String
  question    Question       @relation(fields: [questionId], references: [id])
  studentId   String
  student     StudentSession @relation(fields: [studentId], references: [id])
  answer      String
  submittedAt DateTime       @default(now())
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model Upvote {
  id                String          @id @default(uuid())
  studentSessionId  String
  studentQuestionId String
  createdAt         DateTime        @default(now())
  studentSession    StudentSession  @relation(fields: [studentSessionId], references: [id])
  studentQuestion   StudentQuestion @relation(fields: [studentQuestionId], references: [id])

  @@unique([studentSessionId, studentQuestionId])
}

model PollResponse {
  id               String         @id @default(uuid())
  sessionId        String
  session          LiveSession    @relation(fields: [sessionId], references: [id])
  studentSessionId String
  studentSession   StudentSession @relation(fields: [studentSessionId], references: [id])
  answer           String
  createdAt        DateTime       @default(now())
}
