// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRoles {
  SuperAdmin
  Company
}

enum TimeFormat {
  twelve
  twentyFour
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
  UPDATED
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  role            UserRoles @default(Company)
  password        String    @db.VarChar(255)
  firstName       String    @map("first_name")
  lastName        String    @map("last_name")
  emailVerified   Boolean   @default(false) @map("email_verified")
  verificationOtp String?   @map("verification_otp")
  otpExpiration   DateTime? @map("otp_expiration")
  isActive        Boolean   @default(true) @map("is_active")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  userProfile UserProfile?
  qrCodes     QRCode[]
  reviews     Review[]

  @@map("users")
}

model UserProfile {
  id            String     @id @default(cuid())
  gender        String
  companyName   String     @map("company_name")
  location      String?
  websiteUrl    String?    @map("website_url")
  timezone      String     @default("Europe/Berlin")
  timeFormat    TimeFormat @default(twelve) @map("time_format")
  language      String     @default("Deutsch")
  logo          String?
  googlePlaceId String?    @map("google_place_id")
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @updatedAt @map("updated_at")

  userId String @unique @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model QRCode {
  id         String    @id @default(cuid())
  user       User      @relation(fields: [userId], references: [id])
  userId     String    @map("user_id")
  code       String    @unique // The actual QR code data
  label      String? // A label for the QR code
  scans      Int       @default(0)
  isActive   Boolean   @default(true) @map("is_active")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  lastScanAt DateTime? @map("last_scan_at")

  reviews Review[]

  @@map("qr_codes")
}

model Review {
  id             String       @id @default(cuid())
  userId         String       @map("user_id")
  rating         Int // 1-5 stars
  comment        String       @default("")
  customerName   String       @map("customer_name")
  customerEmail  String       @map("customer_email")
  status         ReviewStatus @default(PENDING)
  qrCodeId       String       @map("qr_code_id")
  googleReviewId String?      @map("google_review_id") // ID of the review if posted to Google
  responseText   String?      @map("response_text") // Business response to review
  responseAt     DateTime?    @map("response_at") // When the business responded
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")

  user   User   @relation(fields: [userId], references: [id])
  qrCode QRCode @relation(fields: [qrCodeId], references: [id])

  @@map("reviews")
}
